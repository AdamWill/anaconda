#!/usr/bin/python

import mock
import sys

class writeGrubConfTest(mock.TestCase):
    def setUp(self):
        self.setupModules(['_isys', 'block', 'storage', 'logging'])
        
        self.fs = mock.DiskIO()
        
        import pyanaconda
        pyanaconda.anaconda_log = mock.Mock()
        
        import pyanaconda.booty.x86 as x86
        x86.open = self.fs.open
        x86.os = mock.Mock()
        x86.os.access.return_value=False
        x86.bootloaderInfo = mock.Mock()
        x86.x86BootloaderInfo.getPhysicalDevices = mock.Mock(return_value=[''])
        x86.x86BootloaderInfo.grubbyPartitionName = mock.Mock(return_value='(hd0,0)')
        x86.x86BootloaderInfo.serial = 0
        x86.x86BootloaderInfo.timeout = 0
        x86.x86BootloaderInfo.args = mock.Mock(return_value='')
        x86.x86BootloaderInfo.args.get.return_value=''
        x86.x86BootloaderInfo.makeInitrd = mock.Mock(
            return_value = 'initramfs-2.6.33.3-85.fc13.x86_64.img')
        
        # Params for writeGrubConf function        
        self.instRoot = ''        
        self.bootDev = mock.Mock()        
        self.rootDev = mock.Mock()
        self.rootDev.path = '/dev/sda'
        self.rootDev.name = 'linux'
        self.rootDev.fstabSpec = '/dev/sda'        
        self.defaultDev = mock.Mock()
        self.defaultDev.name = 'linux'        
        self.kernelList = [('Fedora', 'Fedora', '2.6.33.5-124.fc13.x86_64')]        
        self.chainList = []        
        self.grubTarget = 'sda1'        
        self.grubPath = '/grub'       
        self.cfPath = '/'

    def tearDown(self):
        self.tearDownModules()
        
    def writegrubconf_1_test(self):
        """Simulate writing GRUB.conf"""
        import pyanaconda.booty.x86

        bl = pyanaconda.booty.x86.x86BootloaderInfo(mock.Mock())
        bl.writeGrubConf(self.instRoot, self.bootDev, self.rootDev, \
                        self.defaultDev, self.kernelList, self.chainList, \
                        self.grubTarget, self.grubPath, self.cfPath)
        
        self.assertEqual(self.fs['/boot/grub/grub.conf'],
            "# grub.conf generated by anaconda\n"
            "#\n"
            "# Note that you do not have to rerun grub after making changes to this file\n"
            "# NOTICE:  You have a /boot partition.  This means that\n"
            "#          all kernel and initrd paths are relative to /boot/, eg.\n"
            "#          root (hd0,0)\n"
            "#          kernel /vmlinuz-version ro root=/dev/sda\n"
            "#          initrd /initrd-[generic-]version.img\n"
            "#boot=/dev/sda1\n"
            "default=0\n"
            "timeout=0\n"
            "title Fedora (2.6.33.5-124.fc13.x86_64)\n"
            "	root (hd0,0)\n"
            "	kernel /vmlinuz-2.6.33.5-124.fc13.x86_64 ro root=/dev/sda\n"
            "	initrd /initramfs-2.6.33.3-85.fc13.x86_64.img\n"
        )

    def writegrubconf_2_test(self):
        """Simulate writing GRUB.conf"""
        import pyanaconda.booty.x86
        
        # make EFI
        pyanaconda.booty.iutil.isEfi = mock.Mock(return_value=True)    
        bl = pyanaconda.booty.x86.x86BootloaderInfo(mock.Mock())
        bl.writeGrubConf(self.instRoot, self.bootDev, self.rootDev, \
                        self.defaultDev, self.kernelList, self.chainList, \
                        self.grubTarget, self.grubPath, self.cfPath)
               
        self.assertEqual(self.fs['/boot/efi/EFI/redhat/grub.conf'],
            "# grub.conf generated by anaconda\n"
            "#\n"
            "# Note that you do not have to rerun grub after making changes to this file\n"
            "# NOTICE:  You have a /boot partition.  This means that\n"
            "#          all kernel and initrd paths are relative to /boot/, eg.\n"
            "#          root (hd0,0)\n"
            "#          kernel /vmlinuz-version ro root=/dev/sda\n"
            "#          initrd /initrd-[generic-]version.img\n"
            "#boot=/dev/sda1\n"
            "default=0\n"
            "timeout=0\n"
            "title Fedora (2.6.33.5-124.fc13.x86_64)\n"
            "	root (hd0,0)\n"
            "	kernel /vmlinuz-2.6.33.5-124.fc13.x86_64 ro root=/dev/sda\n"
            "	initrd /initramfs-2.6.33.3-85.fc13.x86_64.img\n"
        )

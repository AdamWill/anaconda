#!/bin/bash

ORIGDIR=`pwd`

if [ -z "$1" ]; then
	echo "upd-instroot: updates instimage from a Red Hat RPMS directory"
	echo "usage:        $0 <packagedir> [templatedir] [instroot]"
	exit 1
fi

if [ ! -d $1 ]; then
	if [ -z "$ARCH" ]; then
		echo "ARCH must be set" >&2
		exit 1
	fi
	LATEST="latest --arch $ARCH"
fi

PACKAGEDIR=$1

if [ -z "$ARCH" ]; then
	ARCH=`rpm -qp --qf "%{ARCH}" $PACKAGEDIR/anaconda-runtime*.rpm`
fi

NEEDGR=yes
if [ $ARCH = ia64 ]; then
    NEEDGR=""
fi

prunePackageList() {
	PACKAGEPATH=$1
	PACKAGES="$2"

	if [ -n "$LATEST" ]; then
	    $LATEST $PACKAGEPATH $PACKAGES
	    if [ $? != 0 ]; then
		$LATEST $PACKAGEPATH $PACKAGES >&2
		kill -9 $$
	    fi
		
	    return
	fi

	PATTERN=""
	PACKAGEFILES=""
	for PKG in $PACKAGES; do
	    PATTERN="${PATTERN:+${PATTERN}|}(^$PKG )"
	    PACKAGEFILES="$PACKAGEFILES $(ls $PACKAGEPATH/${PKG}*{${ARCH},noarch}.rpm 2>/dev/null)"
	done

	# gtk+, enough said
	PATTERN=$(echo $PATTERN | sed 's,[\+\*],\\&,g')

	PACKAGEFILES=$(ls $PACKAGEFILES | sort -u)

	rpm --qf "%{NAME} $PACKAGEPATH/%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}.rpm\n" \
		-qp $PACKAGEFILES  | egrep "$PATTERN"  | sed 's/.* //' 
}

expandPackageSet() {
    RPMS=$1
    PKGDEST=$2
    KEEPFILE=$3

    for n in $RPMS; do 
	echo -ne "\rExpanding packages..." $(basename $n)
	if [ $(rpm -qp --qf '%{NAME}' $n) = "glibc" ] ; then
	    GLIBC=$n
	fi 
	rpm2cpio $n | (cd $PKGDEST; cpio -E $KEEPFILE --quiet -iumd)
	echo -ne "\rExpanding packages..." "$(basename $n | sed 's/./ /g')"
    done
}

if [ -z "$2" ]; then
    DEST=/tmp/upd-instroot
else
    DEST=$2
fi

if [ -z "$3" ]; then
    DESTGR=/tmp/upd-instroot
else
    DESTGR=$3
fi

rm -rf $DEST $DESTGR
mkdir -p $DEST
mkdir -p $DESTGR

PACKAGES="glibc setup openssl python newt libtermcap zlib ash
	 e2fsprogs util-linux raidtools locale-ja popt mount procps
	 rpm XFree86 Xconfigurator anaconda anaconda-runtime
	 kudzu-devel kudzu db3 rpm-python bzip2 dosfstools pciutils"

if [ $ARCH = i386 ]; then
    PACKAGES="$PACKAGES kernel-pcmcia-cs"
fi

# xpm is missing

# Some packages are listed twice, but that's okay

PACKAGESGR="anaconda XFree86-libs imlib libpng libtiff libjpeg
           XFree86-S3 XFree86-SVGA XFree86-75dpi-fonts
           XFree86-ISO8859-2-75dpi-fonts glib gtk+
           XFree86-ISO8859-9-75dpi-fonts esound audiofile gnome-libs
           XFree86-100dpi-fonts XFree86-ISO8859-2 XFree86-ISO8859-9
           XFree86-xfs e2fsprogs fileutils glibc rsh less ftp readline
           gzip popt specspo util-linux rpm rpm-devel open grep
           net-tools traceroute tar procps textutils sed ncurses bash
           cpio mt-st iputils sh-utils XFree86-cyrillic-fonts XFree86
           Xconfigurator pygnome pygtk pygtk-libglade pygnome-libglade
           pygnome-applet pygnome-capplet gdk-pixbuf XFree86-KOI8-R
           XFree86-KOI8-R-75dpi-fonts pciutils"

if [ -z "$NEEDGR" ]; then
    PACKAGESGR="bash"
fi

PACKAGES="$PACKAGES db1 db2"
if [ $ARCH != ia64 ]; then
    PACKAGESGR="$PACKAGESGR mtools pine modutils"
fi

if [ $ARCH = sparc ]; then
    PACKAGESGR="$PACKAGESGR XFree86-3DLabs XFree86-Mach64 tilo silo"
fi

if [ $ARCH = i386 ]; then
    PACKAGESGR="$PACKAGESGR XFree86-3DLabs XFree86-8514 XFree86-AGX
	       XFree86-FBDev XFree86-I128 XFree86-Mach32
	       XFree86-Mach64 XFree86-Mach8 XFree86-Mono XFree86-P9000
	       XFree86-S3 XFree86-S3V XFree86-SVGA XFree86-VGA16
	       XFree86-W32 syslinux" 
fi

if [ $ARCH = alpha ]; then
    PACKAGESGR="$PACKAGESGR XFree86-3DLabs XFree86-Mono XFree86-P9000
                XFree86-S3 XFree86-SVGA aboot"
fi

KEEPFILE=/tmp/keepfile.$$
cat > $KEEPFILE <<EOF
bin/ash
bin/fdisk*
bin/mkfs*
etc/group
etc/nsswitch.conf
etc/passwd
etc/protocols
etc/services
lib/ld-*
lib/libc*
lib/libcom_err*
lib/libcrypt*
lib/libdb-*
lib/libdb-3.0
lib/libdb.so.2
lib/libdb.so.3
lib/libdb1*
lib/libdl*
lib/libe2p*
lib/libext2fs*
lib/libm[-.]*
lib/libnsl*
lib/libnss_dns*
lib/libnss_files*
lib/libpthread*
lib/libresolv*
lib/librt[-.]*
lib/libss*
lib/libtermcap*
lib/libuuid*
sbin/badblocks
sbin/clock
sbin/fdisk
sbin/hwclock
sbin/ldconfig
sbin/mkdosfs
sbin/mke2fs
sbin/mkfs.ext2
sbin/mkfs.msdos
sbin/mkraid
sbin/mkswap
sbin/probe
usr/X11R6/lib/X11/Cards
usr/X11R6/share/Xconfigurator/MonitorsDB
usr/bin/python*
usr/lib/anaconda-runtime/*
usr/lib/anaconda/*
usr/lib/anaconda/installclasses/*
usr/lib/anaconda/textw/*
usr/lib/libssl*
usr/lib/libcrypto*
usr/lib/libbz2*
usr/lib/libdb.so.2
usr/lib/libdb.so.3
usr/lib/libdb1*
usr/lib/libnewt*
usr/lib/libpopt*
usr/lib/librpm.so*
usr/lib/librpmio.so*
usr/lib/libz.*
usr/lib/python*
usr/lib/python1.5/site-packages/kudzumodule.so
usr/lib/python1.5/site-packages/rpmmodule.so
usr/lib/rpm/macros
usr/lib/rpm/rpmpopt
usr/lib/rpm/rpmrc
usr/share/locale/*/LC_MESSAGES/anaconda.mo
usr/sbin/anaconda
usr/sbin/anaconda-runrescue
usr/share/kudzu/pcitable
usr/share/pci.ids
EOF

KEEPFILEGR=/tmp/keepfilegr.$$
cp $KEEPFILE $KEEPFILEGR
cat >> $KEEPFILEGR <<EOF
bin/bash
bin/cat
bin/chmod
bin/cp
bin/cpio
bin/dd
bin/df
bin/du
bin/grep
bin/gunzip
bin/gzip
bin/ln
bin/ls
bin/mkdir
bin/mt
bin/mv
bin/ping
bin/ps
bin/rm
bin/rpm
bin/sed
bin/sync
bin/tar
bin/touch
bin/umount
bin/zcat
boot/*.b
boot/bootlx
etc/gtk/gtkrc*
etc/im_palette.pal
etc/imrc
lib/libnss_dns*
lib/libproc*
lib/libutil*
sbin/depmod
sbin/e2fsck
sbin/e2label
sbin/fsck
sbin/fsck.ext2
sbin/ifconfig
sbin/insmod
sbin/lsmod
sbin/lspci
sbin/modprobe
sbin/rmmod
sbin/route
sbin/silo
usr/X11R6/bin/XF86_3DLabs
usr/X11R6/bin/XF86_FBDev
usr/X11R6/bin/XF86_I128
usr/X11R6/bin/XF86_Mach32
usr/X11R6/bin/XF86_Mach64
usr/X11R6/bin/XF86_S3
usr/X11R6/bin/XF86_S3V
usr/X11R6/bin/XF86_SVGA
usr/X11R6/bin/XF86_TGA
usr/X11R6/bin/XF86_VGA16
usr/X11R6/bin/XFree86
usr/X11R6/bin/Xsun
usr/X11R6/bin/Xsun24
usr/X11R6/bin/XsunMono
usr/X11R6/bin/Xtest
usr/X11R6/bin/setxkbmap
usr/X11R6/lib/X11/XKeysymDB
usr/X11R6/lib/X11/fonts/75dpi/cour*
usr/X11R6/lib/X11/fonts/75dpi/fonts*
usr/X11R6/lib/X11/fonts/75dpi/helv*
usr/X11R6/lib/X11/fonts/75dpi/tim*
usr/X11R6/lib/X11/fonts/cyrillic/*
usr/X11R6/lib/X11/fonts/misc/12x*
usr/X11R6/lib/X11/fonts/misc/6x*
usr/X11R6/lib/X11/fonts/misc/7x*
usr/X11R6/lib/X11/fonts/misc/8x*
usr/X11R6/lib/X11/fonts/misc/9x*
usr/X11R6/lib/X11/fonts/misc/cursor*
usr/X11R6/lib/X11/fonts/misc/fonts*
usr/X11R6/lib/X11/fonts/misc/jis*
usr/X11R6/lib/X11/fonts/misc/k14*
usr/X11R6/lib/X11/fonts/misc/olcursor*
usr/X11R6/lib/X11/locale/*
usr/X11R6/lib/X11/rgb*
usr/X11R6/lib/X11/xkb/*
usr/X11R6/lib/X11/xserver/SecurityPolicy
usr/X11R6/lib/libICE*
usr/X11R6/lib/libSM*
usr/X11R6/lib/libX11*
usr/X11R6/lib/libXext*
usr/X11R6/lib/libXi*
usr/X11R6/lib/libXpm*
usr/X11R6/lib/modules/*
usr/bin/chattr*
usr/bin/ftp
usr/bin/head
usr/bin/less
usr/bin/lsattr*
usr/bin/maketilo
usr/bin/mattrib
usr/bin/mbadblocks
usr/bin/mcd
usr/bin/mcopy
usr/bin/mdel
usr/bin/mdeltree
usr/bin/mdir
usr/bin/mdu
usr/bin/mformat
usr/bin/minfo
usr/bin/mlabel
usr/bin/mmd
usr/bin/mmount
usr/bin/mmove
usr/bin/mpartition
usr/bin/mrd
usr/bin/mread
usr/bin/mren
usr/bin/mshowfat
usr/bin/mtools
usr/bin/mtype
usr/bin/mwrite
usr/bin/mzip
usr/bin/open
usr/bin/pico
usr/bin/rcp
usr/bin/rlogin
usr/bin/rsh
usr/bin/syslinux
usr/bin/tac
usr/bin/tail
usr/bin/tilo
usr/bin/uniq
usr/lib/anaconda/iw
usr/lib/gconv/*
usr/lib/gdk-pixbuf/loaders/*png*
usr/lib/gdkimlib*
usr/lib/libImlib*
usr/lib/libart*
usr/lib/libaudio*
usr/lib/libesd*
usr/lib/libgdk*
usr/lib/libglib*
usr/lib/libgmodule*
usr/lib/libgnome*
usr/lib/libgnomesupport*
usr/lib/libgnomeui*
usr/lib/libgnorba*
usr/lib/libgnorbagtk*
usr/lib/libgthread*
usr/lib/libgtk*
usr/lib/libgtkxmhtml*
usr/lib/libimlib-png*
usr/lib/libimlib-pnm*
usr/lib/libimlib-xpm*
usr/lib/libjpeg*
usr/lib/libncurses*
usr/lib/libpng*
usr/lib/libreadline*
usr/lib/libthread*
usr/lib/libtiff*
usr/lib/libzvt*
usr/lib/locale/*
usr/lib/rpm/rpmpopt
usr/sbin/chroot
usr/sbin/ddcprobe
usr/sbin/gnome-pty-helper
usr/sbin/traceroute
usr/share/anaconda/*
usr/share/fonts/ISO8859-2/75dpi/cour*
usr/share/fonts/ISO8859-2/75dpi/fonts*
usr/share/fonts/ISO8859-2/75dpi/helv*
usr/share/fonts/ISO8859-2/75dpi/tim*
usr/share/fonts/ISO8859-2/misc/6x*
usr/share/fonts/ISO8859-2/misc/9x*
usr/share/fonts/ISO8859-2/misc/fonts*
usr/share/fonts/ISO8859-9/75dpi/fonts*
usr/share/fonts/ISO8859-9/75dpi/tr*cour*
usr/share/fonts/ISO8859-9/75dpi/tr*helv*
usr/share/fonts/ISO8859-9/75dpi/tr*tim*
usr/share/fonts/ISO8859-9/misc/fonts*
usr/share/fonts/ISO8859-9/misc/tr*6x*
usr/share/fonts/ISO8859-9/misc/tr*9x*
usr/share/fonts/KOI8-R/75dpi/*
usr/share/fonts/KOI8-R/misc/*
usr/share/locale/*
usr/share/pixmaps/gnome-default-dlg.png
usr/share/pixmaps/gnome-error.png
usr/share/pixmaps/gnome-info.png
usr/share/pixmaps/gnome-question.png
usr/share/pixmaps/gnome-warning.png
usr/share/pixmaps/no.xpm
usr/share/pixmaps/yes.xpm
usr/share/terminfo/l/linux
usr/share/terminfo/x/xterm
usr/share/zoneinfo/zone.tab
EOF

TIMEZONES="
usr/share/zoneinfo/US
usr/share/zoneinfo/Europe
usr/share/zoneinfo/Japan
usr/share/zoneinfo/America
"

# sparc needs 100dpi fonts as well, otherwise
# things look ugly

if [ $ARCH = sparc ]; then
    cat >> $KEEPFILEGR <<-EOF
usr/X11R6/lib/X11/fonts/100dpi/cour*
usr/X11R6/lib/X11/fonts/100dpi/helv*
usr/X11R6/lib/X11/fonts/100dpi/tim*
usr/X11R6/lib/X11/fonts/100dpi/fonts*
usr/share/fonts/ISO8859-2/100dpi/cour*
usr/share/fonts/ISO8859-2/100dpi/helv*
usr/share/fonts/ISO8859-2/100dpi/tim*
usr/share/fonts/ISO8859-2/100dpi/fonts*
EOF
fi

echo "Assembling package list..."
RPMS=$(prunePackageList $PACKAGEDIR "$PACKAGES")
RPMSGR=$(prunePackageList $PACKAGEDIR "$PACKAGESGR")

rm -rf $DEST; mkdir -p $DEST/usr/sbin
rm -rf $DESTGR; mkdir -p $DESTGR/usr/sbin $DESTGR/var/lib
ln -s /tmp $DESTGR/var/lib/xkb 

for file in $KEEPFILE $KEEPFILEGR; do
   cat $file | awk '{print $1 "\n./" $1}' > $file-
   mv -f $file- $file
done

echo -n "Expanding packages..."
expandPackageSet "$RPMS" $DEST $KEEPFILE

(cd $DEST; tar cSpf - .) | (cd $DESTGR; tar xSpf -)

expandPackageSet "$RPMSGR" $DESTGR $KEEPFILEGR
echo -e "\rExpanding packages..."

echo "retrieving timezones"
TZDIR=/tmp/glibc-timezone-$$
mkdir -p $TZDIR/usr/share/zoneinfo
rpm2cpio $GLIBC | (cd $TZDIR; cpio --quiet -iumd usr/share/zoneinfo ./usr/share/zoneinfo ./usr/share/zoneinfo/* usr/share/zoneinfo/*)
(cd $TZDIR; tar cSpf - $TIMEZONES) | (cd $DEST; tar xSpf -)
(cd $TZDIR; tar cSpf - $TIMEZONES) | (cd $DESTGR; tar xSpf -)
rm -rf $TZDIR

chown -R root:root $DEST $DESTGR
chmod -R a+rX-w $DEST $DESTGR

if [ $ARCH = sparc ]; then
    rm -f $DESTGR/usr/X11R6/bin/XF86_VGA16
fi

# Remove locales unused during the install
cat $DESTGR/usr/lib/anaconda/lang-table* | awk '
{ print $5; print gensub(/\..*$/,"","",$5); print gensub(/_.*$/,"","",$5); }
' | LC_ALL=C sort -u > $DESTGR/locales
for p in lib share; do (
cd $DESTGR/usr/$p/locale && {
ls | grep -v locale.alias | LC_ALL=C sort > $DESTGR/locales.list
LC_ALL=C comm -13 $DESTGR/locales $DESTGR/locales.list | xargs rm -rf
}
); done
rm -f $DESTGR/locales $DESTGR/locales.list

# Remove unneeded XFree86 modules
rm -rf $DESTGR/usr/X11R6/lib/modules/dri
rm -f $DESTGR/usr/X11R6/lib/modules/extensions/lib{GLcore,glx,pex5}*

echo "Running mkfontdir..."
if [ -n "$NEEDGR" ]; then
    for I in $DESTGR/usr/X11R6/lib/X11/fonts/* $DESTGR/usr/share/fonts/ISO8859-2/* $DESTGR/usr/share/fonts/ISO8859-9/*; do
	/usr/X11R6/bin/mkfontdir $I
    done
fi

rm -f $KEEPFILE $KEEPFILEGR

echo -n "Scrubbing trees..."
for p in $DEST $DESTGR; do
	echo -n -e "\rScrubbing trees..." "$p"
	ln -s ../lib/anaconda/raidstart-stub $p/usr/bin/raidstart
	ln -s ../lib/anaconda/raidstop-stub $p/usr/bin/raidstop

	mv $p/usr/sbin/anaconda $p/usr/bin/anaconda
	mv $p/usr/sbin/anaconda-runrescue $p/usr/bin/anaconda-runrescue
	mv $p/usr/lib/anaconda-runtime/lib* $p/usr/lib

	mv $p/usr/lib/anaconda-runtime/collage $p/usr/bin

	find $p -type d | xargs chmod 755

	if [ -f $p/bin/bash ]; then
	    rm -f $p/bin/ash
	    ln -s bash $p/bin/sh
	else
	    ln -s ash $p/bin/sh
	fi

	(cd $p/bin; find) | (cd $p/bin; /bin/cpio --quiet -pdmu $p/usr/bin)
	(cd $p/sbin; find) | (cd $p/sbin; /bin/cpio --quiet -pdmu $p/usr/sbin)
	rm -rf $p/bin
	rm -rf $p/sbin

	# copy bootloader files for sparc
	if [ $ARCH = sparc -a $p = $DESTGR ]; then
	    mkdir -p $p/usr/lib/anaconda-runtime/boot
	    (cd $p/boot; find -name "*.b") | (cd $p/boot; /bin/cpio --quiet -pdmu $p/usr/lib/anaconda-runtime/boot)
        fi

	# copy bootloader file for alpha
	if [ $ARCH = alpha -a $p = $DESTGR ]; then
	    mkdir -p $p/usr/lib/anaconda-runtime/boot
	    cp -af $p/boot/bootlx $p/usr/lib/anaconda-runtime/boot
        fi

	rm -rf $p/boot $p/home $p/root $p/tmp

	find $p -name "*.a" | grep -v "usr/X11R6/lib/modules" | xargs rm -rf

	(cd /usr/share/zoneinfo; find . -type f -or -type l | 
		grep '^./[A-Z]' | sort | sed 's/^..//' | 
		gzip -9) > $p/usr/lib/timezones.gz

	if [ -x /usr/bin/runroot ]; then
	    REALPATH=`(cd $p; /bin/pwd)`
            runroot dist-7.0 --onlyone --arch $ARCH "cd $REALPATH\; usr/lib/anaconda-runtime/scrubtree $REALPATH"
	else
	    $p/usr/lib/anaconda-runtime/scrubtree $p
	fi
	echo -n -e "\rScrubbing trees..." "$(echo $p | sed 's/./ /g')"
done

echo -e "\nCompressing .mo files in stage2 images..."
if [ -d $DEST/usr/share/locale ]; then
    for i in `find $DEST/usr/share/locale -name anaconda.mo`; do
	gzip -9 $i
	mv -f $i.gz $i
    done
fi

echo "Patching python library..."

# always use passive mode for ftp installs
cd $DEST/usr/lib/python1.5
patch -p0 > /dev/null <<EOF
--- urllib.py.orig	Thu May 18 18:40:49 2000
+++ urllib.py	Thu May 18 18:41:35 2000
@@ -354,6 +354,7 @@
         path, attrs = splitattr(path)
         path = unquote(path)
         dirs = string.splitfields(path, '/')
+	dirs[0] = '/' + dirs[0]
         dirs, file = dirs[:-1], dirs[-1]
         if dirs and not dirs[0]: dirs = dirs[1:]
         key = (user, host, port, string.joinfields(dirs, '/'))
@@ -563,6 +564,7 @@
         self.ftp = ftplib.FTP()
         self.ftp.connect(self.host, self.port)
         self.ftp.login(self.user, self.passwd)
+	self.ftp.set_pasv (1)
         for dir in self.dirs:
             self.ftp.cwd(dir)
     def retrfile(self, file, type):
EOF
cd -

echo -n -e "Removing unused python files in hdimage... "
if [ -x /usr/bin/runroot ]; then
    REALPATH=`(cd $DEST; /bin/pwd)`
    runroot dist-7.0 --onlyone --arch $ARCH "cd $REALPATH\; usr/lib/anaconda-runtime/pythondeps $REALPATH"
else
    $DEST/usr/lib/anaconda-runtime/pythondeps $DEST
fi
echo "done."

for p in $DEST $DESTGR; do
	find $p -name "*.py" | while read fn; do
	    rm -f ${fn}o
	    if [ $p = $DEST ]; then
		rm -f ${fn}c
		ln -sf /dev/null ${fn}c
	    fi
	done
done

if [ $NEEDGR ]; then
    # Xserver needs a place to put the compiled xkb maps.
    rm -rf $DESTGR/usr/X11R6/lib/X11/xkb/compiled
    ln -s /tmp $DESTGR/usr/X11R6/lib/X11/xkb/compiled
fi

# this is only for the minimal second stage
echo "Compressing ramdisk install images..."

	cd $DEST/usr/lib
	find python1.5 | cpio --quiet -H crc -o | gzip -9 > python1.5.cgz
	rm -rf python1.5

	find anaconda | cpio --quiet -H crc -o | gzip -9 > anaconda.cgz
	rm -rf anaconda

	ls libnewt* libslang* | cpio --quiet -H crc -o | 
		gzip -9 > slang-newt.cgz
	rm -f libnewt* libslang*

	cd $DEST/usr/bin
	echo python1.5 | cpio --quiet -H crc -o | gzip -9 > python1.5.cgz
	/bin/rm -f python python1.5
	/bin/ln -s python1.5 python

	mv anaconda anaconda.real
	mv $DEST/usr/lib/anaconda-runtime/anaconda-stub anaconda

	cd $DEST/lib
	ls    libcom* libcrypt* libdl* libe2p* libext2* libm* libnss* libnsl* \
	      libpthread* libss* libtermcap* libuuid* \
			| cpio --quiet -H crc -o | gzip -9 > libs.cgz
	rm -f libcom* libcrypt* libdl* libe2p* libext2* libm* libnss* libnsl* \
	      libpthread* libss* libtermcap* libuuid*

	cd $DEST/usr
	find X11R6 | cpio --quiet -H crc -o | gzip -9 > X11R6.cgz
	rm -rf X11R6

	cd $DEST/usr/sbin
	ls [a-r]* | cpio --quiet -H crc -o | gzip -9 > sbin.cgz
	rm -f [a-r]*

	rm -rf $DEST/usr/lib/anaconda-runtime

if [ -n "$NEEDGR" ]; then
    cd $ORIGDIR
    $DESTGR/usr/lib/anaconda-runtime/checkcards.py $DESTGR/usr/share/kudzu/pcitable $DESTGR/usr/X11R6/lib/X11/Cards
fi

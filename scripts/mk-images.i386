SYSLINUX=$IMGPATH/usr/bin/syslinux

if [ ! -f $SYSLINUX ]; then
    echo "$SYSLINUX doesn't exist"
    exit 1
fi

prepareBootImage() {
        dd if=/dev/zero bs=1k count=$BOOTDISKSIZE of=/$MBD_TMPIMAGE 2>/dev/null
	mkdosfs -r 16 -C $MBD_TMPIMAGE $BOOTDISKSIZE >/dev/null
	$SYSLINUX $MBD_TMPIMAGE
	mount -o loop -t msdos $MBD_TMPIMAGE $MBD_BOOTTREE

	prepareBootTree
}

# prepare a directory with the kernel, initrd, and various message files
# used to populate a boot image
prepareBootTree() {
	(cd $BOOTDISKDIR; find . ! -name "*.msg" -maxdepth 1 ! -type d | cpio --quiet -p $MBD_BOOTTREE)
	
	cp $MBD_FSIMAGE $MBD_BOOTTREE/initrd.img
	cp $KERNELROOT/boot/vmlinuz-* $MBD_BOOTTREE/vmlinuz
	pngtopnm $BOOTDISKDIR/syslinux-splash.png | ppmtolss16 \#000000=0 \#c4c7ce=7 \#c60000=2 \#ffffff=15 \#7790c2=9 > $BOOTDISKDIR/splash.lss
	cp $BOOTDISKDIR/splash.lss $MBD_BOOTTREE/splash.lss
	if [ -d $BOOTDISKDIR/$BOOTLANG ]; then
	    # fb console and kon don't get along...
	    if [ "$BOOTLANG" = "ja_JP" ]; then
		sed -e "s/ vga=[0-9]*//g" < $MBD_BOOTTREE/syslinux.cfg > $MBD_BOOTTREE/syslinux.cf2
		mv -f $MBD_BOOTTREE/syslinux.cf2 $MBD_BOOTTREE/syslinux.cfg
	    fi
	    if [ -n $BOOTDIR ]; then
		sed -e "s/initrd.img/initrd.img lang=$BOOTDIR/g" < $MBD_BOOTTREE/syslinux.cfg > $MBD_BOOTTREE/syslinux.cf2
		mv -f $MBD_BOOTTREE/syslinux.cf2 $MBD_BOOTTREE/syslinux.cfg
	    fi
	    for file in $BOOTDISKDIR/$BOOTLANG/*.msg; do
		filename=`basename $file`
		sed -e "s/@VERSION@/$VERSION/g" $file > $MBD_BOOTTREE/$filename
	    done
	    if [ $? != 0 ]; then
		echo $0: Failed to copy messages from $BOOTDISKDIR/$BOOTLANG to $MBD_BOOTTREE.
		umount $MBD_BOOTTREE
		rm -rf $MBD_BOOTTREE $MBD_TMPIMAGE
		exit 1
	    fi
	else
	    for file in $BOOTDISKDIR/*.msg; do
		filename=`basename $file`
		sed -e "s/@VERSION@/$VERSION/g" $file > $MBD_BOOTTREE/$filename
	    done
	    if [ $? != 0 ]; then
		echo $0: Failed to copy messages from $BOOTDISKDIR to $MBD_BOOTTREE.
		umount $MBD_BOOTTREE
		rm -rf $MBD_BOOTTREE $MBD_TMPIMAGE
		exit 1
	    fi
	fi
}

mkdir -p $TOPDESTPATH/images
cat > $TOPDESTPATH/images/README <<EOF

The files in this directory are raw disk images.  Some are boot disks
for booting the Red Hat Linux installation program.  Others are driver
disks to support loading the installation program from less common
hardware.

Follow the instructions in the Red Hat Linux Installation Guide,
Chapter 2, section "Making Installation Diskettes" to create the
disks.

The drivers.img driver disk image has been split into several disks
because of the increasing size of the supported modules.

The following boot images images available:

boot.img - boot image for CD and hard drive based install
bootnet.img - boot image for network based install
pcmcia.img - boot image for installing on laptops

The following driver disks are available:

EOF

# LATEUSBMODS go in the second stage.  
# FIXME: bleah, have to include sd_mod for usb-storage
USBMODS="usb-ohci usb-uhci hid keybdev usb-storage sd_mod"
# usb-storage goes on both so we can reload it.  *sigh*
LATEUSBMODS="mousedev usb-storage"
IDEMODS=""
SCSIMODS="sd_mod sr_mod"

FSMODS="msdos vfat ext3 reiserfs"
SECSTAGE="agpgart raid0 raid1 raid5 lvm-mod $FSMODS $IDEMODS $SCSIMODS $LATEUSBMODS st parport_pc parport"

COMMONMODULES="vfat $USBMODS"
LOCALMODULES="$COMMONMODULES aic7xxx megaraid ncr53c8xx 
	     sym53c8xx $IDEMODS $SCSIMODS"
NETWORKMODULES="$COMMONMODULES nfs 3c59x 
	       eepro100 tulip pcnet32 8139too"
#	       sis900 e100 hp100 natsemi"

PCMCIAMAINMODULES="$COMMONMODULES nfs $IDEMODS $SCSIMODS"

# images we only want on the CD (usually for space reasons)
ISOLINUXMODULES="ehci-hcd ieee1394 ohci1394 sbp2"

echo "Building dosutils/autoboot/initrd.img"
makeinitrd --initrdto $TOPDESTPATH/dosutils/autoboot/initrd.img \
	   --initrdsize 2750 \
	   --loaderbin loader-local \
	   --modules "$LOCALMODULES"

echo "Building images/pxeboot/initrd.img"
makeinitrd --initrdto $TOPDESTPATH/images/pxeboot/initrd.img \
	   --initrdsize 2750 \
	   --loaderbin loader-network \
	   --modules "$NETWORKMODULES"

# XXX hack hack
PCMCIAMODULES_EXCLUDED="
	apa1480_cb
	airo
	airo_cs
	aironet4500_core
	aironet4500_proc
	hermes
	iflash2+_mtd
	iflash2_mtd
	memory_cb
	memory_cs
	parport_cs
	parport_pc
	parport
	serial_cs
	serial_cb
	sram_mtd
        aironet4500_cs
        orinoco_cs
        orinoco
        orinoco_old_cs
        wavelan_cs
        wvlan_cs
"
PCMCIAMODULES_EXCLUDED_SED="sed"
for m in $PCMCIAMODULES_EXCLUDED
do
   PCMCIAMODULES_EXCLUDED_SED="$PCMCIAMODULES_EXCLUDED_SED -e 's/$m//g'"
done
PCMCIAMODULES=`echo $PCMCIAMODULES | eval "$PCMCIAMODULES_EXCLUDED_SED"`

echo "Building images/initrd-pcmcia.img"
makeinitrd --initrdto $TOPDESTPATH/images/initrd-pcmcia.img \
	   --pcmcia \
	   --initrdsize 2750 \
	   --loaderbin loader-pcmcia \
	   --modules "$PCMCIAMAINMODULES"
[ $? = 0 ] || exit 1

TIER1LANGS="de_DE|fr_FR|it_IT|es_ES|ja_JP"
for I in $BOOTDISKDIR; do
#for I in $BOOTDISKDIR `find $BOOTDISKDIR -type d | egrep "($TIER1LANGS)"`; do
    BOOTLANG=`basename $I`
    BOOTDIR=`basename $I | cut -d'_' -f1`

    if [ $BOOTLANG = "boot" ]; then
	BOOTLANG=""
	BOOTDIR=""
    fi

    echo "Building $BOOTDIR/boot.img"
    makebootdisk --kernelto $TOPDESTPATH/dosutils/autoboot/vmlinuz  \
		 --bootdisksize 1440 \
		 --imagename $BOOTDIR/boot.img \
		 --initrd $TOPDESTPATH/dosutils/autoboot/initrd.img
    [ $? = 0 ] || exit 1

    echo "Building $BOOTDIR/bootnet.img"
    makebootdisk --kernelto $TOPDESTPATH/images/pxeboot/vmlinuz  \
		 --bootdisksize 1440 \
		 --imagename $BOOTDIR/bootnet.img \
		 --initrd $TOPDESTPATH/images/pxeboot/initrd.img
    [ $? = 0 ] || exit 1

    echo "Building $BOOTDIR/pcmcia.img"
    makebootdisk --imagename $BOOTDIR/pcmcia.img \
	         --bootdisksize 1440 \
		 --initrd $TOPDESTPATH/images/initrd-pcmcia.img
    [ $? = 0 ] || exit 1
done

rm -f $TOPDESTPATH/images/initrd-pcmcia.img

echo "Building drvblock.img"
makedriverdisk --padsize 1440 "Supplemental Block Device Drivers" "drvblock" "+scsi"
[ $? = 0 ] || exit 1
echo "Building drvnet.img"
makedriverdisk --padsize 1440 "Supplemental Network Drivers" "drvnet" "+net"
[ $? = 0 ] || exit 1

echo "Building pcmciadd.img"
makedriverdisk --padsize 1440 "PCMCIA Driver Diskette" "pcmciadd" "$PCMCIAMODULES"
[ $? = 0 ] || exit 1

unset BOOTLANG
unset BOOTDIR

echo "Building initrd-everything.img"
makeinitrd --initrdto $TOPDESTPATH/images/pxeboot/initrd-everything.img \
	   --pcmcia \
	   --initrdsize 5000 \
	   --loaderbin loader-pcmcia \
	   --modules "$LOCALMODULES $NETWORKMODULES $PCMCIAMAINMODULES $PCMCIAMODULES $ISOLINUXMODULES =scsi =net"
[ $? = 0 ] || exit 1

if [ -f $IMGPATH/usr/lib/syslinux/isolinux.bin ]; then
	echo "Building isolinux directory"
	MBD_BOOTTREE=$TOPDESTPATH/isolinux
	MBD_FSIMAGE=$TOPDESTPATH/images/pxeboot/initrd-everything.img
	mkdir $MBD_BOOTTREE
	cp $IMGPATH/usr/lib/syslinux/isolinux.bin $MBD_BOOTTREE/isolinux.bin

	prepareBootTree

	# isolinux needs the config file to be isolinux.cfg
	mv $MBD_BOOTTREE/syslinux.cfg $MBD_BOOTTREE/isolinux.cfg
else
	echo "No isolinux binaries.  Skipping isolinux creation"
fi

echo "Building main moduleball"
makemainmodules "=scsi =net $SECSTAGE"
[ $? = 0 ] || exit 1

echo "Building netstg.img"
makeinstimage "netstg" "=scsi $SECSTAGE"
[ $? = 0 ] || exit 1
echo "Building hdstg.img"
makeinstimage "hdstg" "=net $SECSTAGE"
[ $? = 0 ] || exit 1
echo "Building stage2.img"
makemainimage "stage2" "cramfs"
[ $? = 0 ] || exit 1

# clean up time -- being very explicit about what's linked
if [ -f $TOPDESTPATH/isolinux/vmlinuz -a -f $TOPDESTPATH/isolinux/initrd.img ] ;then
	echo "Cleaning up images"
	# links for the pxeboot bits
	rm -f $TOPDESTPATH/images/pxeboot/*
	ln $TOPDESTPATH/isolinux/vmlinuz $TOPDESTPATH/images/pxeboot/vmlinuz
	ln $TOPDESTPATH/isolinux/initrd.img $TOPDESTPATH/images/pxeboot/initrd.img

	# links for the autoboot bits
	rm -f $TOPDESTPATH/dosutils/autoboot/*
	ln $TOPDESTPATH/isolinux/vmlinuz $TOPDESTPATH/dosutils/autoboot/vmlinuz
	ln $TOPDESTPATH/isolinux/initrd.img $TOPDESTPATH/dosutils/autoboot/initrd.img
fi
	
cat > $TOPDESTPATH/images/pxeboot/README <<EOF
The files in this directory are useful for booting a machine via PXE.  

The following files are available:
vmlinuz - the BOOT kernel used for the installer
initrd.img - an initrd with support for all install methods and
    drivers supported for installation of Red Hat Linux
EOF
